<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!DOCTYPE struts-config PUBLIC
          "-//Apache Software Foundation//DTD Struts Configuration 1.3//EN"
          "http://struts.apache.org/dtds/struts-config_1_3.dtd">

<!-- This is a blank Struts configuration file with an example welcome action/page 
	and other commented sample elements. Struts Validator is configured using 
	the factory defaults and is ready-to-use. NOTE: If you have a generator tool 
	to create the corresponding Java classes for you, you could include the details 
	in the "form-bean" declarations. Otherwise, you would only define the "form-bean" 
	element itself, with the corresponding "name" and "type" attributes, as shown 
	here. -->


<struts-config>


	<!-- ================================================ Form Bean Definitions -->

	<form-beans>
		<!-- sample form bean descriptor for an ActionForm <form-bean name="inputForm" 
			type="app.InputForm"/> end sample -->

		<form-bean name="inscriptionform" type="view.InscriptionForm" />
		<form-bean name="contactform" type="view.ContactForm" />
		<form-bean name="chercherform" type="view.ChercherForm" />
		<form-bean name="loginform" type="view.LoginForm" />
		<form-bean name="contactform_auth" type="view.ContactForm_auth" />
		<form-bean name="deposer_annonce_form" type="view.Deposer_AnnonceForm" />
		<!-- <form-bean name="loginform" type="view.LoginForm"/> -->

		<!-- sample form bean descriptor for a DynaActionForm <form-bean name="logonForm" 
			type="org.apache.struts.action.DynaActionForm"> <form-property name="username" 
			type="java.lang.String"/> <form-property name="password" type="java.lang.String"/> 
			</form-bean> end sample -->
	</form-beans>


	<!-- ========================================= Global Exception Definitions -->

	<global-exceptions>
		<!-- sample exception handler <exception key="expired.password" type="app.ExpiredPasswordException" 
			path="/changePassword.jsp"/> end sample -->
	</global-exceptions>


	<!-- =========================================== Global Forward Definitions -->

	<global-forwards>
		<!-- Default forward to "Welcome" action -->
		<!-- Demonstrates using index.jsp to forward -->
		<forward name="welcome" path="/Welcome.do" />
	</global-forwards>


	<!-- =========================================== Action Mapping Definitions -->

	<action-mappings>
		<!-- Default "Welcome" action -->
		<!-- Forwards to Welcome.jsp -->
		<action path="/Welcome" forward="/pages/Welcome.jsp" />

		<action path="/pages/inscription" type="controler.InscriptionAction"
			name="inscriptionform" validate="true" input="/pages/Inscription.jsp">
			<forward name="inscription_ouv" path="/pages/inscription_ouverte.jsp" />
		</action>
		<action path="/chercher" type="controler.ChercherAction"
			name="chercherform" validate="true" input="toffres">
			<forward name="repond" path="/pages/Tout_Offres.jsp" />
		</action>
		<action path="/pages/contact" type="controler.ContactAction"
			name="contactform" validate="true" input="/pages/contact.jsp">
			<forward name="msg_envoyer" path="/pages/msg_envoyer.jsp" />
		</action>
		
		<action path="/pages/contact_auth" type="controler.ContactAction_auth"
			name="contactform_auth" validate="true" input="/pages/contact_auth.jsp">
			<forward name="msg_envoyer_auth" path="/pages/msg_envoyer_auth.jsp" />
		</action>
		<action path="/pages/deposer" type="controler.Deposer_AnnonceAction"
			name="deposer_annonce_form" validate="true" input="/pages/Deposer_annonce_auth.jsp">
			<forward name="annonce_deposer" path="/pages/Annonce_deposer.jsp" />
		</action>

		<action path="/pages/logini" type="controler.LoginAction"
			name="loginform" validate="true" input="/pages/Acceuil.jsp">
			 <forward name="acceuil_auth" path="/pages/Acceuil_auth.jsp" />
			  <forward name="acceuil_admin" path="/pages/Acceuil_admin.jsp" />
			<!-- forward name="failure" path="/pages/failure.jsp"/> -->
		</action>
		<!-- <action path="/pages/login" type="controler.LoginAction" name="loginform" 
			validate="true" input="/pages/Login.jsp"> <forward name="CompagniePub" path="/pages/CompagniePub.jsp"/> 
			</action> -->

		<!-- sample input and input submit actions <action path="/Input" type="org.apache.struts.actions.ForwardAction" 
			parameter="/pages/Input.jsp"/> <action path="/InputSubmit" type="app.InputAction" 
			name="inputForm" scope="request" validate="true" input="/pages/Input.jsp"/> 
			<action path="/edit*" type="app.Edit{1}Action" name="inputForm" scope="request" 
			validate="true" input="/pages/Edit{1}.jsp"/> end samples -->
	</action-mappings>


	<!-- ======================================== Message Resources Definitions -->

	<message-resources parameter="MessageResources" />


	<!-- =============================================== Plug Ins Configuration -->

	<!-- ======================================================= Tiles plugin -->
	<!-- This plugin initialize Tiles definition factory. This later can takes 
		some parameters explained here after. The plugin first read parameters from 
		web.xml, thenoverload them with parameters defined here. All parameters are 
		optional. The plugin should be declared in each struts-config file. - definitions-config: 
		(optional) Specify configuration file names. There can be several comma separated 
		file names (default: ?? ) - moduleAware: (optional - struts1.1) Specify if 
		the Tiles definition factory is module aware. If true (default), there will 
		be one factory for each Struts module. If false, there will be one common 
		factory for all module. In this later case, it is still needed to declare 
		one plugin per module. The factory will be initialized with parameters found 
		in the first initialized plugin (generally the one associated with the default 
		module). true : One factory per module. (default) false : one single shared 
		factory for all modules - definitions-parser-validate: (optional) Specify 
		if xml parser should validate the Tiles configuration file. true : validate. 
		DTD should be specified in file header (default) false : no validation Paths 
		found in Tiles definitions are relative to the main context. To use this 
		plugin, download and add the Tiles jar to your WEB-INF/lib directory then 
		uncomment the plugin definition below. <plug-in className="org.apache.struts.tiles.TilesPlugin" 
		> <set-property property="definitions-config" value="/WEB-INF/tiles-defs.xml" 
		/> <set-property property="moduleAware" value="true" /> </plug-in> -->


	<!-- =================================================== Validator plugin -->

	<plug-in className="org.apache.struts.validator.ValidatorPlugIn">
		<set-property property="pathnames"
			value="/org/apache/struts/validator/validator-rules.xml,
               /WEB-INF/validation.xml" />
	</plug-in>

</struts-config>

